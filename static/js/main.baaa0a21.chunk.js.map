{"version":3,"sources":["components/header.tsx","components/navbar.tsx","components/sidebar.tsx","pages/list/list.tsx","pages/tabs/registry/registry.tsx","pages/tabs/profile/profile.tsx","pages/tabs/tabs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Navbar","page","RegExp","test","window","location","href","expand","className","colorScheme","fluid","process","active","content","freeSet","cilHome","Sidebar","style","minHeight","height","cilPeople","size","List","history","useHistory","useParams","useState","people","setPeople","actPage","setActPage","lastPage","setLastPage","status","setStatus","useEffect","a","loadList","p","url","fetch","resp","json","list","results","map","person","console","log","goPage","push","variant","cilPlus","xs","aria-label","value","onChange","op","target","type","placeholder","color","filter","user","i","name","replace","eye_color","cilPencil","onClick","old","k","deletePerson","cilXCircle","count","links","total","Math","ceil","disabled","previous","next","generatePageLinks","Registry","phone","setPhone","mobile","setMobile","expire","setExpire","setValueMask","field","val","v","ev","checked","htmlFor","Profile","id","setUser","split","pop","Tabs","useLocation","pathname","activeKey","setActiveKey","visible","App","sm","basename","path","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.baaa0a21.chunk.js","sourcesContent":["import { CHeader, CHeaderBrand } from '@coreui/react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <CHeader>\r\n      <CHeaderBrand>CIAtécinica React Test</CHeaderBrand>\r\n    </CHeader>\r\n  )\r\n}\r\n\r\nexport default Header;","import { \r\n  CNavbar, \r\n  CContainer,\r\n  CNavbarBrand,\r\n  CNavbarNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CBreadcrumb,\r\n  CBreadcrumbItem\r\n} from '@coreui/react';\r\nimport CIcon from '@coreui/icons-react';\r\nimport { freeSet } from '@coreui/icons';\r\n\r\nconst Navbar = () => {\r\n\r\n  const page = RegExp('registry|profile').test(window.location.href) ? 'registry' : 'list';\r\n\r\n  return (\r\n    <CNavbar expand=\"lg\" className=\"bg-dark\" colorScheme=\"dark\">\r\n      <CContainer fluid>\r\n        <CNavbarBrand>Navbar</CNavbarBrand>\r\n        <CNavbarNav className=\"me-auto mb-2 mb-lg-0\">\r\n          <CNavItem>\r\n            <CNavLink href={process.env.PUBLIC_URL+\"/\"} active>\r\n              Users\r\n            </CNavLink>\r\n          </CNavItem>\r\n        </CNavbarNav>\r\n        <CBreadcrumb className=\"d-flex\">\r\n          <CBreadcrumbItem href={process.env.PUBLIC_URL+\"/\"}>\r\n            <CIcon content={freeSet.cilHome}></CIcon>\r\n          </CBreadcrumbItem>\r\n          <CBreadcrumbItem href={process.env.PUBLIC_URL+\"/\"}>Users</CBreadcrumbItem>\r\n          {page === 'list' && <CBreadcrumbItem>List</CBreadcrumbItem>}\r\n          {page === 'registry' && <CBreadcrumbItem>Create</CBreadcrumbItem>}\r\n        </CBreadcrumb>\r\n      </CContainer>\r\n    </CNavbar>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import { CSidebar, CSidebarNav, CNavLink } from '@coreui/react';\r\nimport CIcon from '@coreui/icons-react';\r\nimport { freeSet } from '@coreui/icons';\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <CSidebar style={{minHeight:'600px', height: '100%'}}>\r\n      <CSidebarNav>\r\n        <li>\r\n          <CNavLink href=\"/\" className=\"justify-content-center\">\r\n            <CIcon content={freeSet.cilPeople} size=\"lg\"></CIcon>\r\n          </CNavLink>\r\n        </li>\r\n      </CSidebarNav>\r\n    </CSidebar>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","import { useState, useEffect } from 'react';\r\nimport { \r\n  CContainer,\r\n  CNav, \r\n  CNavItem,\r\n  CNavLink,\r\n  CRow,\r\n  CCol,\r\n  CFormLabel,\r\n  CFormControl,\r\n  CTable,\r\n  CTableHead,\r\n  CTableRow,\r\n  CTableHeaderCell,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CButton,\r\n  CPagination,\r\n  CPaginationItem,\r\n  CFooter,\r\n} from '@coreui/react';\r\nimport CIcon from '@coreui/icons-react';\r\nimport { freeSet } from '@coreui/icons';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nconst List = () => {\r\n\r\n  let history = useHistory();\r\n  const { page } = useParams<any>();\r\n  const [people, setPeople] = useState<any>(null);\r\n  const [actPage, setActPage] = useState<number>(1);\r\n  const [lastPage, setLastPage] = useState<number>(1);\r\n  const [status, setStatus] = useState('all');\r\n  \r\n  useEffect(() => {\r\n    // carrega a lista ao carregar a pagina\r\n    (async () => {\r\n      await loadList(page ? page : null);\r\n    })()\r\n  },[]);\r\n\r\n  const loadList = async (p?:number) => {\r\n    const url = 'https://swapi.dev/api/people/' + (p ? `?page=${p}` : '');\r\n    const resp = await fetch(url);\r\n    const list = await resp.json();\r\n    if (list && list.results) {\r\n      list.results = list.results.map((person:any) => ({...person, status:true}));\r\n    }\r\n    setPeople(list);\r\n    console.log('list',list);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (actPage && actPage !== lastPage) {\r\n      loadList(actPage);\r\n      setLastPage(actPage);\r\n    }\r\n  }, [actPage, loadList, setLastPage]);\r\n\r\n  const deletePerson = (i:number) => {\r\n    setPeople((old:any) => ({\r\n      ...old, \r\n      results: old.results.map((person:any,k:number) => ({\r\n        ...person,\r\n        status: i===k ? false : person.status}\r\n      ))\r\n    }));\r\n  }\r\n\r\n  const goPage = (p:number) => {\r\n    if (p && p !== lastPage) {\r\n      history.push(`/list/${p}`);\r\n      setActPage(p);\r\n    }\r\n  }\r\n\r\n  const getFilteredList = () => {\r\n    if (status && people && people.results) {\r\n      return people.results.filter((person:any) => {\r\n        return status === 'all'\r\n          ? true\r\n          : status === 'active'\r\n            ? person.status === true\r\n            : person.status === false\r\n      })\r\n    }\r\n    return [];\r\n  }\r\n\r\n  const generatePageLinks = () => {\r\n    if (people && people.count > 10) {\r\n      const links:any[] = [];\r\n      const total = Math.ceil(people.count/10);\r\n      links.push(\r\n        <CPaginationItem\r\n        key={'pagePrev'}\r\n        disabled={people.previous?false:true}\r\n        onClick={() => goPage(people.previous?.replace(/\\D/g,''))}>\r\n          Previous\r\n        </CPaginationItem>);\r\n      for (let i=1; i<=total; i++) {\r\n        links.push(\r\n          <CPaginationItem\r\n            key={`page${i}`}\r\n            onClick={() => goPage(i)}>\r\n              {i}\r\n          </CPaginationItem>)\r\n      }\r\n      links.push(\r\n        <CPaginationItem\r\n          key={'pageNext'}\r\n          disabled={people.next?false:true}\r\n          onClick={() => goPage(people.next?.replace(/\\D/g,''))}\r\n          >\r\n          Next\r\n        </CPaginationItem>);\r\n      return links;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <CContainer fluid className=\"content\">\r\n      <CNav variant=\"pills\">\r\n        <CNavItem className=\"me-auto\">\r\n          <CNavLink href={process.env.PUBLIC_URL+\"/registry\"} active>\r\n            <CIcon content={freeSet.cilPlus}></CIcon>\r\n            Add\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem className=\"d-flex\">\r\n          <CRow>\r\n            <CCol xs=\"auto\">\r\n              <CFormLabel className=\"col-form-label\">Status</CFormLabel>\r\n            </CCol>\r\n            <CCol xs=\"auto\">\r\n              <select className=\"form-select\" aria-label=\"Default select example\" value={status} onChange={(op) => setStatus(op.target.value)}>\r\n                <option value=\"all\">All</option>\r\n                <option value=\"active\">Active</option>\r\n                <option value=\"inative\">Inative</option>\r\n              </select>              \r\n            </CCol>\r\n            <CCol xs=\"auto\">\r\n              <CFormControl type=\"text\" placeholder=\"Search\"/>\r\n            </CCol>\r\n          </CRow>\r\n        </CNavItem>\r\n      </CNav>\r\n      <div>\r\n        {people && \r\n        <CTable color=\"Light\">\r\n          <CTableHead color=\"Light\">\r\n            <CTableRow color=\"Light\">\r\n              <CTableHeaderCell color=\"Light\">Name</CTableHeaderCell>\r\n              <CTableHeaderCell color=\"Light\">Username</CTableHeaderCell>\r\n              <CTableHeaderCell color=\"Light\">Eye Color</CTableHeaderCell>\r\n              <CTableHeaderCell color=\"Light\">Status</CTableHeaderCell>\r\n              <CTableHeaderCell color=\"Light\">Actions</CTableHeaderCell>\r\n            </CTableRow>\r\n          </CTableHead>\r\n          {people && people.results && getFilteredList().map((user:any, i:number) => (\r\n            <CTableBody color=\"Light\" key={i}>\r\n              <CTableRow color=\"Light\">\r\n                <CTableDataCell color=\"Light\">{user.name}</CTableDataCell>\r\n                <CTableDataCell color=\"Light\">{user.name.replace(' ','')}</CTableDataCell>\r\n                <CTableDataCell color=\"Light\">{user.eye_color}</CTableDataCell>\r\n                <CTableDataCell color=\"Light\">{user.status?'Active':'Inactive'}</CTableDataCell>\r\n                <CTableDataCell color=\"Light\">\r\n                  <CButton color=\"primary\" variant=\"ghost\" href={`/profile/${user.url.replace(/\\D/g,'')}`}>\r\n                    <CIcon content={freeSet.cilPencil}></CIcon>\r\n                  </CButton>\r\n                  <CButton color=\"primary\" variant=\"ghost\" onClick={() => deletePerson(i)}>\r\n                    <CIcon content={freeSet.cilXCircle}></CIcon>\r\n                  </CButton>\r\n                </CTableDataCell>\r\n              </CTableRow>\r\n            </CTableBody>            \r\n          ))}\r\n        </CTable>}        \r\n      </div>\r\n      {people && people.count > 10 &&\r\n      <CFooter>\r\n        <div></div>\r\n        <div>\r\n          <CPagination className=\"d-flex\">\r\n            {generatePageLinks()}\r\n          </CPagination>  \r\n        </div>\r\n      </CFooter>}\r\n    </CContainer>\r\n  )\r\n}\r\n\r\nexport default List;\r\n","import { useState } from 'react';\r\nimport {\r\n  CForm,\r\n  CRow,\r\n  CFormLabel,\r\n  CFormControl,\r\n  CButton\r\n} from '@coreui/react';\r\n\r\nconst Registry = () => {\r\n\r\n  const [phone, setPhone] = useState('');\r\n  const [mobile, setMobile] = useState('');\r\n  const [expire, setExpire] = useState('yes');\r\n\r\n  const setValueMask = (field:'phone'|'mobile', val:string) => {\r\n    const v = val\r\n      .replace(/\\D/g,'')\r\n      .replace(/^(\\d{3})(\\d{1,})/, '($1) $2')\r\n      .replace(/(.+\\s\\d{3})(\\d{1,})/, '$1-$2')\r\n      .replace(/(.+\\d{4})(.+)/, '$1');\r\n    \r\n    if (field === 'phone') \r\n      setPhone(v);\r\n    else \r\n      setMobile(v);\r\n  }\r\n\r\n  return (\r\n    <div className=\"areaForm\">\r\n      <CForm>\r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Username\r\n          </CFormLabel>\r\n          <div className=\"col-sm-5\">\r\n            <CFormControl type=\"text\"/>\r\n          </div>\r\n        </CRow>\r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Full name\r\n          </CFormLabel>\r\n          <div className=\"col-sm-5\">\r\n            <CFormControl type=\"text\" placeholder=\"First name\"/>\r\n          </div>\r\n          <div className=\"col-sm-5\">\r\n            <CFormControl type=\"text\" placeholder=\"Last name\"/>\r\n          </div>\r\n        </CRow>        \r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            E-mail Address*\r\n          </CFormLabel>\r\n          <div className=\"col-sm-10\">\r\n            <CFormControl type=\"email\" />\r\n          </div>          \r\n        </CRow>    \r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Phone Number\r\n          </CFormLabel>\r\n          <div className=\"col-sm-4\">\r\n            <CFormControl type=\"text\" value={phone} onChange={(ev) => setValueMask('phone', ev.target.value)} />\r\n          </div>\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Mobile Phone*\r\n          </CFormLabel>\r\n          <div className=\"col-sm-4\">\r\n            <CFormControl type=\"text\" value={mobile} onChange={(ev) => setValueMask('mobile', ev.target.value)}/>\r\n          </div>\r\n        </CRow> \r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Password\r\n          </CFormLabel>\r\n          <div className=\"col-sm-8\">\r\n            <CFormControl type=\"password\" />\r\n\r\n          </div>          \r\n        </CRow>                     \r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Confirm Password\r\n          </CFormLabel>\r\n          <div className=\"col-sm-8\">\r\n            <CFormControl type=\"password\" />\r\n          </div>          \r\n        </CRow>                     \r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Expire\r\n          </CFormLabel>\r\n          <div className=\"col-sm-5\">\r\n            <div className=\"form-check form-check-inline\">\r\n              <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" value=\"yes\" checked={expire === 'yes'} onChange={(ev) => setExpire(ev.target.value)}/>\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Yes</label>\r\n            </div>\r\n            <div className=\"form-check form-check-inline\">\r\n              <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" value=\"never\" checked={expire === 'never'} onChange={(ev) => setExpire(ev.target.value)}/>\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Never</label>\r\n            </div>\r\n          </div>  \r\n          {expire === 'yes' && \r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Expire Date\r\n          </CFormLabel> }              \r\n          {expire === 'yes' && \r\n          <div className=\"col-sm-3\">\r\n            <input className=\"form-control\" type=\"date\"></input>\r\n          </div>}  \r\n        </CRow>                     \r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Status\r\n          </CFormLabel>\r\n          <div className=\"col-sm-2\">\r\n            <select className=\"form-select\">\r\n              <option value=\"active\">Active</option>\r\n              <option value=\"inative\">Inative</option>\r\n            </select>\r\n          </div>\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            days\r\n          </CFormLabel>\r\n        </CRow>                     \r\n        <CRow className=\"mb-3\">\r\n          <div className=\"col-sm-10\"></div>\r\n          <div className=\"col-sm-1\">\r\n            <CButton color=\"light\" href=\"/\">Cancel</CButton>\r\n          </div>\r\n          <div className=\"col-sm-1\">\r\n            <CButton color=\"warning\" href=\"/\">Save</CButton>\r\n          </div>\r\n        </CRow>                     \r\n      </CForm>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Registry;","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n  CForm,\r\n  CRow,\r\n  CFormLabel,\r\n  CFormControl,\r\n  CButton\r\n} from '@coreui/react';\r\n\r\nconst Profile = () => {\r\n\r\n  const { id } = useParams<any>();\r\n  const [user, setUser] = useState<any>();\r\n\r\n  const gerUserName = () => {\r\n    if (user)\r\n      return user.name.replace(/\\s/g,'');\r\n    return '';\r\n  }\r\n\r\n  const getFirstName = () => {\r\n    if (user)\r\n      return user.name.split(' ')[0];\r\n   return ''; \r\n  }\r\n\r\n  const getLastName = () => {\r\n    if (user)\r\n      return user.name.split(' ').pop();\r\n    return ''; \r\n  }\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const resp = await fetch(`https://swapi.dev/api/people/${id||1}/`);\r\n      const people = await resp.json();\r\n      setUser(people);\r\n    })()\r\n  },[])  \r\n\r\n  return (\r\n    <div className=\"areaForm\">\r\n      {user && (\r\n      <CForm>\r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Username\r\n          </CFormLabel>\r\n          <div className=\"col-sm-5\">\r\n            <CFormControl type=\"text\" value={`${gerUserName()}`} onChange={()=>{}}/>\r\n          </div>\r\n        </CRow>\r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Full name\r\n          </CFormLabel>\r\n          <div className=\"col-sm-5\">\r\n            <CFormControl type=\"text\" value={`${getFirstName()}`} onChange={()=>{}}/>\r\n          </div>\r\n          <div className=\"col-sm-5\">\r\n            <CFormControl type=\"text\" value={`${getLastName()}`} onChange={()=>{}}/>\r\n          </div>\r\n        </CRow>    \r\n        <CRow className=\"mb-3\">\r\n          <CFormLabel className=\"col-sm-2 col-form-label\">\r\n            Profile\r\n          </CFormLabel>\r\n          <div className=\"col-sm-2\">\r\n            <select className=\"form-select\">\r\n              <option value=\"owner\">Owner</option>\r\n              <option value=\"driver\">Driver</option>\r\n              <option value=\"office\">Office</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"col-sm-2\"></div>          \r\n          <CFormLabel className=\"col-sm-1 col-form-label\">\r\n            Company\r\n          </CFormLabel>\r\n          <div className=\"col-sm-2\">\r\n            <select className=\"form-select\">\r\n              <option value=\"1\">Company 1</option>\r\n              <option value=\"2\">Company 2</option>\r\n              <option value=\"3\">Company 3</option>\r\n            </select>\r\n          </div>          \r\n        </CRow> \r\n        <CRow className=\"mb-3\">\r\n          <div className=\"col-sm-10\"></div>\r\n          <div className=\"col-sm-1\">\r\n            <CButton color=\"light\" href=\"/\">Cancel</CButton>\r\n          </div>\r\n          <div className=\"col-sm-1\">\r\n            <CButton color=\"warning\" href=\"/\">Save</CButton>\r\n          </div>\r\n        </CRow>                             \r\n      </CForm>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import { useState } from 'react';\r\nimport {\r\n  CNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CTabContent,\r\n  CTabPane\r\n} from '@coreui/react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport RegistryPage from './registry/registry';\r\nimport ProfilePage from './profile/profile';\r\n\r\nconst Tabs = () => {\r\n  let location = useLocation();\r\n\r\n  const [activeKey, setActiveKey] = useState(() => {\r\n    return RegExp('profile').test(location.pathname) \r\n      ? 'profile'\r\n      : 'registry'\r\n  })\r\n  return (\r\n    <div className=\"content\">\r\n      <CNav variant=\"tabs\">\r\n        <CNavItem>\r\n          <CNavLink\r\n            href=\"#\"\r\n            active={activeKey === 'registry'}\r\n            onClick={() => setActiveKey('registry')}>\r\n            User Registry\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem>\r\n          <CNavLink\r\n            href=\"#\"\r\n            active={activeKey === 'profile'}\r\n            onClick={() => setActiveKey('profile')}>\r\n            Profile\r\n          </CNavLink>\r\n        </CNavItem>\r\n      </CNav>\r\n      <CTabContent>\r\n        <CTabPane visible={activeKey === 'registry'}>\r\n          <RegistryPage/>\r\n        </CTabPane>\r\n        <CTabPane visible={activeKey === 'profile'}>\r\n          <ProfilePage/>\r\n        </CTabPane>\r\n      </CTabContent>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tabs;","// import React from 'react';\nimport '@coreui/coreui/dist/css/coreui.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\n\nimport { CContainer, CRow, CCol } from '@coreui/react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport Header from './components/header';\nimport Navbar from './components/navbar';\nimport Sidebar from './components/sidebar';\n\nimport ListPage from './pages/list/list';\nimport TabsPage from './pages/tabs/tabs';\n\nfunction App() {\n  return (\n    <CContainer fluid>\n      <CRow>\n        <Header/>\n        <Navbar/>\n      </CRow>\n      <CRow>\n        <CCol sm=\"auto\">\n          <Sidebar/>\n        </CCol>\n        <CCol>\n          <CContainer fluid>\n            <Router basename={process.env.PUBLIC_URL}>\n              <Switch>\n                <Route path=\"/registry\" children={<TabsPage/>}/>\n                <Route path=\"/profile/:id\" children={<TabsPage/>}/>              \n                <Route path=\"/list/:page\" children={<ListPage/>}/>\n                <Route path=\"/\" children={<ListPage/>}/>\n              </Switch>\n            </Router>\n          </CContainer>\n        </CCol>\n      </CRow>\n    </CContainer>      \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}